name: Build test1

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test Unity Project
    runs-on: macos-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Pre-install Unity Hub on a dedicated runner (not shown in this script)

    - name: Set Unity Hub path (assuming pre-installation)
      run: |
        export PATH="$HOME/.local/bin:$PATH"  # Replace with your pre-installed Unity Hub path
        echo "UNITY_HUB_PATH=$HOME/.local/bin/unityhub"  # Replace with your pre-installed Unity Hub path

    - name: Install Dependencies
      run: |
        # Add commands here to install any dependencies required for your Unity project
        # For example, you might need to install Node.js, npm packages, etc.

    - name: Build Unity Project (using $UNITY_HUB_PATH quit)
      run: |
        #!/bin/bash  # Added shebang line

        $UNITY_HUB_PATH quit -batchmode -projectPath "$GITHUB_WORKSPACE/test1" -buildTarget StandaloneLinux64 -executeMethod UnityEditor.BuildPlayerWindow+BuildMethod.BuildPlayer -logFile "$GITHUB_WORKSPACE/build.log"

    # Add other steps for testing, deploying, or other tasks as needed

**Option 2 (Using `open`, if allowed):**

**Important Note:** Using `open` might have security implications. Ensure it's allowed in your CI environment.

```yaml
name: Build test1

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test Unity Project
    runs-on: macos-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Pre-install Unity Hub on a dedicated runner (not shown in this script)

    - name: Set Unity Hub path (assuming pre-installation)
      run: |
        export PATH="$HOME/.local/bin:$PATH"  # Replace with your pre-installed Unity Hub path
        echo "UNITY_HUB_PATH=$HOME/.local/bin/unityhub"  # Replace with your pre-installed Unity Hub path

    - name: Install Dependencies
      run: |
        # Add commands here to install any dependencies required for your Unity project
        # For example, you might need to install Node.js, npm packages, etc.

    - name: Build Unity Project (using open, if allowed)
      run: |
        #!/bin/bash  # Added shebang line

        open -a "Unity Hub.app" --args --quit -batchmode -projectPath "$GITHUB_WORKSPACE/test1" -buildTarget StandaloneLinux64 -executeMethod UnityEditor.BuildPlayerWindow+BuildMethod.BuildPlayer -logFile "$GITHUB_WORKSPACE/build.log"

    # Add other steps for testing, deploying, or other tasks as needed

**Remember:**

* Replace the placeholders (`$HOME/.local/bin`) with your actual paths.
* Ensure the script file has executable permissions (`chmod +x script_name.sh`).
* If using `open`, verify its security implications in your environment.

Choose the appropriate solution based on your security constraints and preferences. With these modifications, your workflow should attempt to build the Unity project using the chosen approach.
